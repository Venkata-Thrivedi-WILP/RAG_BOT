**Overview**
==========

Get user information endpoint allows system administrators, users with user management rights, or the user itself to invoke this API. The purpose of this endpoint is to retrieve the user's information for a given user.

This endpoint uses HTTP POST method and requires authentication using bearer token. It returns the user information in JSON format.

**Key Search Terms**
==================

* Get user information
* User management API
* CyberArk Identity API
* Bearer authentication
* User data retrieval

**Example User Questions**
========================

* What is the user's email address?
* How can I change my password?
* Can I view a user's profile information?
* Is there a way to retrieve a user's directory service ID?
* How do I configure third-party OATH token for a user?

**Developer Notes**
==================

### Required Parameters

* `ID` (query, Optional): The unique ID of the user to fetch attributes for.

### Request/Response Structure

The request body should contain the `ID` parameter. The response will be in JSON format and will include the following properties:

* `Result`: An object containing the user's information.
	+ `DirectoryServiceId`: The unique ID for the directory service.
	+ `ThirdPartyOathConfigured`: A boolean flag indicating if third-party OATH token has been configured for the user.
	+ ...
* `Error`: An object containing an error message if any exception is received from the API.

### Security Considerations

This endpoint requires bearer authentication. The `x-idap-anon` metadata field indicates that anonymous access is not allowed.

**Raw Endpoint Documentation (Formatted)**
==========================================

ENDPOINT: Get user information
PATH: `/UserMgmt/GetUserInfo`
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Invoke this API to get the user information for a given user. Only system administrator, users with user management rights, or the user itself can invoke this API. NOTE: This is a high CPU intensive call, so it should be used appropriately. (Cache the result as needed).
METADATA:
  * `x-idap-anon`: False
PARAMETERS:
  * `ID` (query, Optional): The unique ID of the user to fetch attributes for. The unique ID is generated when the user is created.(default=current user)
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: `*/*`
  Response Schema: UserMgmtGetUserInfo
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * Result (object): The user information is returned as the response to the API
          Nested properties:
            * DirectoryServiceId (string): The unique ID for the directory service. This ID is created when at the time of the directory service integration with the CyberArk Identity. There is a unique ID available for CDS to.
            * ThirdPartyOathConfigured (boolean): Has a third party OATH token been configured for this user? - A Boolean flag that specifies if third-party OATH token has been configured for the user
            * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
            * EmailAddress (string): User email address
            * HasPicture (boolean): Specifies if there is a picture available for this user in cloud directory service.
            * Settings (object): Contains internal state for the Portal Web UI; this property can be ignored.
              Nested properties:
                * uisection (object): UI Settings Section
                  Nested properties:
                    * doNotShowIdaptiveWelcomeWizard (boolean): donot show Idaptive Welcome Wizard
                    * floating-nav-part-Settings-expanded (boolean): expand floating-nav-part settings
                    * nav-part-Settings-expanded (boolean): expand nav-part settings
                * SlackAuthEnabled (boolean): Is Slack Auth Enabled?
                * SecurityKeyConfigured (boolean): Has the user configured a U2F Security Key?
                * HasU2fDeviceWithFacetIdMatched (boolean): Has U2fDevice with FacetId matched?
                * SlackMemberIdSet (boolean): Is Slack MemberId Set?
                * EnablePurchasedLicenseMenu (boolean): Does the user have the right to view licenses?
                * MobileDeviceAuthCapableCount (integer): Mobile Device Auth Capable Count
                * PreferredCulture (string): User's preferred culture if any in culture code format (e.g. fr)
                * DisplayPreferredCulture (string): User's preferred culture if any in display format (e.g. French - fran√ßais)
                * MfaSetupWizardSettings (object): Contains settings that guide MFA setup
                  Nested properties:
                    * ShowU2fInMfaSetupWizard (boolean): Want to show U2f in Mfa Setup Wizard?
                    * ShowSecurityQuestionInMfaSetupWizard (boolean): Want to show security question in Mfa Setup Wizard?
                    * ShowOathPassCodeInMfaSetupWizard (boolean): Want to show OathPassCode in Mfa Setup Wizard?
                    * ShowSmsMessageInMfaSetupWizard (boolean): Want to show SmsMessage in Mfa Setup Wizard?
                    * RequiredFactorSetupCount (integer): Required Factor Setup Count
                    * ShowMfaSetupWizard (boolean): Want to show Mfa Setup Wizard?
                * OnDeviceAuthenticatorConfigured (boolean): Is OnDeviceAuthenticator configured?
            * LastPasswordChangeDate (string): The date-time when the user has last changed the password.
            * DisplayName (string): Display name of the user.
            * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
            * PasswordExpDate (string): The expiry date-time of the user's password.
            * MobileNumber (string): User mobile phone number
            * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
            * SelfUnlocked (string): Self Unlock
            * LastLastLoginDate (string): Date-time user prior last logged in to the CyberArk Identity portal
            * DirectoryServiceLocalizedName (string): Directory service name localized to user's preferred language
            * DirectoryServiceName (string): Directory service name
            * Message (string): Error message for failure response. By default it is 'null'
            * DirectoryServiceType (string): The directory service type to which the user belongs. Ex- CDS (Cloud directory service).
            * IsSysAdmin (boolean): Specifies if the user is a system administrator.
            * SecurityQuestion (string): Specifies if any security question has been added to the user. The value will be 'yes' if the question is added. Else it will be 'null'.
            * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
            * CanChangePassword (boolean): A Boolean flag that specifies whether the user can change the password.
            * Name (string): User name
            * Id (string): The unique ID of the user. The unique ID is generated when the user is created.
            * SecurityQuestionsLastUpdate (string): Date-time user has last updated the security question
            * PasswordResetFlag (integer): An integer that specifies if the password reset is required for the user. The integer can be interpreted as below: 0: no reset needed 1: Reset required 2: Reset optional 3: Reset warning
            * PhonePinLastChangeDate (string): Date-time user last set their phone PIN
            * SqEnabled (boolean): Specifies if the security question MFA setup has been enabled for the user.
            * TenantId (string): The ID of the tenant to which the user belongs.
            * LastLoginDate (string): Date-time user last logged in
            * InnerExceptions (string): InnerExceptions
            * PasswordChangeSoftDays (integer): Days before a user should be warned to change a near to expiring password
            * MessageID (string): Message Id for failure response. By default it is 'null'
            * PasswordChangeHardHours (integer): Hours before a user should be prompted to change an near to expiring password
    "success": false
  "Error": {
    "InvalidUserId": "string_value"
  }
SECURITY: bearerAuth