ENDPOINT: Create user
PATH: /CDirectoryService/CreateUser
METHOD: POST
TAGS: Create Users
DESCRIPTION: Invoke this API to create a new user. Only system administrator or users with user management rights can invoke this API. Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided. Refer guides section Create a User
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * InEverybodyRole (boolean): Place user in Everybody role (default=true)
    * SendSmsInvite (boolean): Send user an sms invite to enroll their mobile device in the protal (default=false)
    * InSysAdminRole (boolean): Place user in System Adminstrator role (default=false)
    * Description (string): Description of user (default=null)
    * Name (string): Username of the user. The username can be 'username@suffix if suffix is required, else 'username'. The username can be optional only when Primary Identifier is provided. Ex: mark@aak7163
    * MobileNumber (string): User's mobile number (default=null); note this field is required if SendSmsInvite is true
    * useAlternateMfaAccount (boolean): Does the user have an alternate MFA Account?
    * OrgPath (string): The organisation name to which the user is added
    * Password (string): Strong password of the user that meets the complexity requirements. Password must be at least 8 characters long, not be longer than 64 characters, contain at least one digit, contain at least one upper and one lower case letter. (default=randomly generated strong password)
    * CmaRedirectedUserUuid (string): Unique id of the redirected user.
    * ServiceUser (boolean): User is a service user (default=false)
    * OfficeNumber (string): User's office number (default=null)
    * ReportsTo (string): Uuid of user this user reports to (default=null)
    * SendEmailInvite (boolean): Send user an email invite to login to the portal. (default=true)
    * HomeNumber (string): User's home number (default=null)
    * DisplayName (string): Display name of user (default=null)
    * PrimaryIdentifier (string): Identifier Type used while login
    * VerifyEmail (boolean): Enforce user to verify the registered email address
    * ForcePasswordChangeNext (boolean): Force password change at first login (default=true)
    * PasswordNeverExpire (boolean): User's password never expires (default=false)
    * Mail (string): Email address of user; Note this field is required if 'SendEmailInvite' is true, or 'VerifyEmail' is true. Ex: mark@yahoo.com
    Required fields: Name, Mail
  Sample Request JSON:
  ```json
  {
  "InEverybodyRole": false,
  "SendSmsInvite": false,
  "InSysAdminRole": false,
  "Description": "string_value",
  "Name": "string_value",
  "MobileNumber": "string_value",
  "useAlternateMfaAccount": false,
  "OrgPath": "string_value",
  "Password": "string_value",
  "CmaRedirectedUserUuid": "string_value",
  "ServiceUser": false,
  "OfficeNumber": "string_value",
  "ReportsTo": "string_value",
  "SendEmailInvite": false,
  "HomeNumber": "string_value",
  "DisplayName": "string_value",
  "PrimaryIdentifier": "string_value",
  "VerifyEmail": false,
  "ForcePasswordChangeNext": false,
  "PasswordNeverExpire": false,
  "Mail": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceCreateUser
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): Unique Id of the created user.
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call.
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure.
      Nested properties:
        * UsernameNotAvailable (string): This error occurs when the given username is already present. By default, the below error message will be displayed: User name user@aak7736 is already in use. Please contact your IT helpdesk.
        * MissingParameter (string): This error occurs when the parameter mail id is not passed. By default, the below error message will be displayed: Parameter 'Mail' must be specified.
        * InvalidUsername (string): This error occurs when the given username is not in correct format. By default, the below error message will be displayed: User name is invalid; user names must be of the form 'name@suffix', not contain restricted characters, and suffix must match an existing User Service suffix..
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "UsernameNotAvailable": "string_value",
    "MissingParameter": "string_value",
    "InvalidUsername": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Start Bulk User Import
PATH: /CDirectoryService/GetUsersFromCsvFile
METHOD: POST
TAGS: Bulk Import
DESCRIPTION: Use this API to initiate the bulk user import in the CyberArk Identity cloud directory. Only system administrators and users with user management rights can invoke this API. This API is the first part of the two API calls to upload a bulk of users in the cloud directory. Refer to SubmitUploadedFile for the second part, which performs the actual upload. This API takes a CSV file containing the users' information for bulk import and the file name as form-data in request. When this API is invoked, the list of users and their information will be read from the CSV file sent as a request to this API, and the Identity cloud will store the file in the cloud storage and returns a ReturnID that contains the formatted name of the CSV. The CSV file will be validated to ensure the data is correct in the CSV file, and validation errors are thrown if the information is not correctly formatted.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
PARAMETERS:
  * importType (query, Required): Bulk import type to process. Default type is Bulk User Import i.e. "ImportBulkUser"
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * File_Name (object): The csv file containing user information
      Nested properties:
        * InEverybodyRole (boolean): Place user in Everybody role (default=true)
        * SendSmsInvite (boolean): Send user an SMS invite to enroll their mobile device in the portal (default=false)
        * InSysAdminRole (boolean): Place user in System Adminstrator role (default=false)
        * Description (string): Description of user (default=null)
        * Name (string): Name of user
        * MobileNumber (string): User's mobile number (default=null); note this field is required if SendSmsInvite is true
        * Password (string): URL encoded password of the user (default=randomly generated strong password)
        * CmaRedirectedUserUuid (string): Idaptive mobile authenticator redirected user uuid
        * ServiceUser (boolean): User is a service user (default=false)
        * OfficeNumber (string): User's office number (default=null).
        * ReportsTo (string): Uuid of user this user reports to (default=null)
        * SendEmailInvite (boolean): Send user an email invite to the portal (default=true)
        * HomeNumber (string): User's home number (default=null)
        * DisplayName (string): Display name of user (default=null)
        * ForcePasswordChangeNext (boolean): Force password change at first login (default=true)
        * PasswordNeverExpire (boolean): User's password never expires (default=false)
        * Mail (string): Email of user (default=null); note this field is required if 'SendEmailInvite' is true
    * FileName (string): The CSV file name that contains a list of users and related data to be read to import. Ex: bulkImportUserTemplate.csv
    Required fields: File_Name, FileName
  Sample Request JSON:
  ```json
  {
  "File_Name": {
    "InEverybodyRole": false,
    "SendSmsInvite": false,
    "InSysAdminRole": false,
    "Description": "string_value",
    "Name": "string_value",
    "MobileNumber": "string_value",
    "Password": "string_value",
    "CmaRedirectedUserUuid": "string_value",
    "ServiceUser": false,
    "OfficeNumber": "string_value",
    "ReportsTo": "string_value",
    "SendEmailInvite": false,
    "HomeNumber": "string_value",
    "DisplayName": "string_value",
    "ForcePasswordChangeNext": false,
    "PasswordNeverExpire": false,
    "Mail": "string_value"
  },
  "FileName": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetUsersFromCsvFile
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): Result includes Count and Columns definition
          Nested properties:
            * ReturnID (string): ReturnID for the successful api call. By default it is null
            * Count (integer): It is the number of records that the call returns
            * Columns (array): Array list of definition of all Columns
              Array items:
                * TableKey (string): Specifies whether the column is a key and if so what kind of key it is. It can be a primary key or a foreign key. Ex: 'Primary'
                * Description (string): It is the brief description of the column. Ex: 'Row Identifier (primary key)'
                * Name (string): It is the name of the column
                * Format (string): Currently It is not applicable. By default it is null
                * TableName (string): It is the name of the table. By default it is null
                * DDName (string): It is the Data dictionary name of the column. Ex: 'ID'
                * DDTitle (string): It is the Data dictionary title of the column. Ex: 'ID'
                * Type (string): It is the numeric indicator of the type of data in the column. Ex: '12'
                * IsHidden (boolean): Specifies whether column is hidden or not. default: false
                * Width (integer): Currently It is not applicable. By default it is 0
                * Title (string): Title of the column. Ex: 'ID'
                * ForeignKey (string): Specifies whether column holds a foreign key or not. By default, it is null
            * Results (array): Results the rows/users details from the csv file
              Array items:
                * Entities (array): Array list of definition of all Columns
                  Array items:
                    * IsForeignKey (string): Specifies whether the entity has a foreign key or not. By default, it is false
                    * Type (string): It is type of the entity. Ex: Application
                    * Key (string): Unique Id of the Entity. Ex:'cb9b5761-6cfe-45a5-8ecf-ce9fa9e0ff82'
                * Row (object): Details of the user that is to be imported
                  Nested properties:
                    * Password (string): This is the password for the user and must meet the CyberArk Cloud Directory password requirements. Default: null
                    * HomeNumber (string): User's home number. Default: null
                    * Mobile Number (integer): User's mobile number. Default: null
                    * OfficeNumber (string): User's office number. Default: null
                    * Roles (string): Role to be assigned for the user
                    * Expiration Date (string): Expiration date for the user. Default: null
                    * Require Password Change (string): Does the user require changing the password after the first login? Default: false
                    * Email Address (string): Email address of the user. Ex: 'mark@email.com'
                    * Login Name (integer): User's login name. Default: null
                    * Description (string): Some information describing the user. Default: null
                    * Display Name (string): Display name of user. Default: null
            * FullCount (integer): It specifies number of maximum users that can be imported
            * IsAggregate (boolean): It is an attribute
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): The success will be true or false
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message, will be returned if data present in the file is invalid
      Nested properties:
        * InvalidSuffix (string): When provided Table is empty or null, you would see this message 'User name 'temp@abc' has an invalid suffix - suffix must be one of the defined suffixes.'
        * InvalidFileFormat (string): When provided Table is empty or null, you would see this message 'Imported file temp is not a valid Excel or CSV file - The file extension is not currently supported.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "ReturnID": "string_value",
      "Count": 0,
      "Columns": [
        {
          "TableKey": "string_value",
          "Description": "string_value",
          "Name": "string_value",
          "Format": "string_value",
          "TableName": "string_value",
          "DDName": "string_value",
          "DDTitle": "string_value",
          "Type": "string_value",
          "IsHidden": false,
          "Width": 0,
          "Title": "string_value",
          "ForeignKey": "string_value"
        }
      ],
      "Results": [
        {
          "Entities": [
            {
              "IsForeignKey": "string_value",
              "Type": "string_value",
              "Key": "string_value"
            }
          ],
          "Row": {
            "Password": "string_value",
            "HomeNumber": "string_value",
            "Mobile Number": 0,
            "OfficeNumber": "string_value",
            "Roles": "string_value",
            "Expiration Date": "string_value",
            "Require Password Change": "string_value",
            "Email Address": "string_value",
            "Login Name": 0,
            "Description": "string_value",
            "Display Name": "string_value"
          }
        }
      ],
      "FullCount": 0,
      "IsAggregate": false
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidSuffix": "string_value",
    "InvalidFileFormat": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Advance Bulk User Import
PATH: /CDirectoryService/SubmitUploadedFile
METHOD: POST
TAGS: Bulk Import
DESCRIPTION: Use this API to create users in bulk in the CyberArk Identity cloud directory. Only system administrators and users with user management rights can invoke this API. This API is the second part of the two API calls to upload a bulk of users in the cloud directory. Refer to GetUsersFromCsvFile for the first part, which initiates the import. This API creates a scheduled task to process the uploaded CSV file containing the users information for the bulk import and creation. When this API is invoked, admin submits the file uploaded to cloud for bulk user import. This API request takes a query parameter 'importType' which should be 'ImportBulkUser' in this particular case. In request body, the email address of the admin making the import and the returnId from preceeding API call are mandatory to be passed.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
PARAMETERS:
  * importType (query, Required): Bulk import type to process. Default type is Bulk User Import i.e. "ImportBulkUser"
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ReturnID (string): Return id recieved in response from preceeding API call '/GetUsersFromCsvFile'
    * AdminEmail (string): Email address of the admin or user with user management rights whois trying to create these users on the cloud
    * SendSmsInvite (boolean): Indicate if you want to send all the users created via this API an sms invite to enroll their mobile device in the portal
    * SendEmailInvite (boolean): Indicate if you want to send all the users created via this API an email invite to the portal
    Required fields: ReturnID, AdminEmail, SendSmsInvite, SendEmailInvite
  Sample Request JSON:
  ```json
  {
  "ReturnID": "string_value",
  "AdminEmail": "string_value",
  "SendSmsInvite": false,
  "SendEmailInvite": false
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceSubmitUploadedFile
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call. Ex: 'Your job for creating users has been submitted successfully. An email will be sent to you after the job has been completed.'
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message would be returned if file did not get uploaded
      Nested properties:
        * ErrorMessage (string): File upload fail.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "ErrorMessage": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Invite Cloud Users
PATH: /UserMgmt/InviteUsers
METHOD: POST
TAGS: Send User Invites
DESCRIPTION: You must be a system administrator or have user management permissions.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * SmsInvite (boolean): Send SMS invitations to invited entities if possible (default=false)
    * Entities (array): Users or groups to invite; each entry is a dictionary including 'Type' (User, Group, Role), 'Guid' (entity UUID), and 'Name' (entity name, only applicable to User entities)
      Array items:
    * Role (string): Add each invited user to this role name if specified (default=null)
    * GroupInvite (boolean): For invited groups, send a single email invitation to the group rather than to each user within the group (default=true)
    * EmailInvite (boolean): Send email invitations to invited entities if possible (default=true)
    Required fields: Entities, EmailInvite
  Sample Request JSON:
  ```json
  {
  "SmsInvite": false,
  "Entities": [
    {}
  ],
  "Role": "string_value",
  "GroupInvite": false,
  "EmailInvite": false
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtInviteUsers
  Response Body Properties:
    * Result (object): Standard result
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Send Invitation Email
PATH: /UserMgmt/SendLoginEmails
METHOD: POST
TAGS: Send User Invites
DESCRIPTION: You must be a system administrator.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ID (array): List of user UUIDs to send invitations to
      Array items:
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "ID": [
    "string_value"
  ]
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtInviteUsers
  Response Body Properties:
    * Result (object): Standard result
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Send Invitation SMS
PATH: /UserMgmt/SendSmsInvite
METHOD: POST
TAGS: Send User Invites
DESCRIPTION: You must be a system administrator or have user management permissions.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * ID (query, Required): User UUID to send invitation to
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtInviteUsers
  Response Body Properties:
    * Result (object): Standard result
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user details
PATH: /CDirectoryService/GetUser
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Use this API to fetch the details of any specific existing user in the cloud directory. Only system administrators, users with user management rights, or the user itself can invoke this API. This API is a GET request that needs the desired user's unique id as parameters in the body arguments. Only system admin or users with user management permission can execute this API to get the details of other cloud users. Standard users can fetch only their details using this API call. The API call returns the ID, name and various details for the requested user.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ID (string): The Unique Id of the Cloud user to fetch. The unique ID is generated when the user is created. Ex: abc-e2e-123
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "ID": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetUser
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): Result includes total count and details of all cloud users
          Nested properties:
            * Alias (string): Suffix for the tenant. Ex:@acme.inc
            * Version (string): Version of the data being recieved. Ex: 1.0
            * DisplayName (string): Display name of user. Default: null
            * CreateDate (string): Date/time user was created
            * LastPasswordChangeDate (string): Date/time user last changed their password
            * MobileNumber (string): User's mobile number. Default: null
            * InEverybodyRole (boolean): Is user in the Everybody role?
            * LastModifiedDate (string): Date/time user was last modified
            * State (string): User state (locked, enabled, expired)
            * Mail (string): Email address of the user. Ex: 'mark@email.com'
            * Name (string): Username of the user. The username will be 'username@suffix' if suffix is required, else 'username'. Ex: 'mark@acme.inc'
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): The success will be true or false
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message, would be returned if a user without administrative/user management permission is trying to fetch the detail of any other existing cloud user
      Nested properties:
        * UnauthorizedUser (string): You are not authorized to perform this operation. Please contact your IT helpdesk
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "Alias": "string_value",
      "Version": "string_value",
      "DisplayName": "string_value",
      "CreateDate": "string_value",
      "LastPasswordChangeDate": "string_value",
      "MobileNumber": "string_value",
      "InEverybodyRole": false,
      "LastModifiedDate": "string_value",
      "State": "string_value",
      "Mail": "string_value",
      "Name": "string_value"
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "UnauthorizedUser": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user information
PATH: /UserMgmt/GetUserInfo
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Invoke this API to get the user information for a given user. Only system administrator, users with user management rights, or the user itself can invoke this API. NOTE: This is a high CPU intensive call, so it should be used appropriately. (Cache the result as needed).
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * ID (query, Optional): The unique ID of the user to fetch attributes for. The unique ID is generated when the user is created.(default=current user)
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtGetUserInfo
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * Result (object): The user information is returned as the response to the API
          Nested properties:
            * DirectoryServiceId (string): The unique ID for the directory service. This ID is created when at the time of the directory service integration with the CyberArk Identity. There is a unique ID available for CDS to.
            * ThirdPartyOathConfigured (boolean): Has a third party OATH token been configured for this user? - A Boolean flag that specifies if third-party OATH token has been configured for the user
            * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
            * EmailAddress (string): User email address
            * HasPicture (boolean): Specifies if there is a picture available for this user in cloud directory service.
            * Settings (object): Contains internal state for the Portal Web UI; this property can be ignored.
              Nested properties:
                * uisection (object): UI Settings Section
                  Nested properties:
                    * doNotShowIdaptiveWelcomeWizard (boolean): donot show Idaptive Welcome Wizard
                    * floating-nav-part-Settings-expanded (boolean): expand floating-nav-part settings
                    * nav-part-Settings-expanded (boolean): expand nav-part settings
                * SlackAuthEnabled (boolean): Is Slack Auth Enabled?
                * SecurityKeyConfigured (boolean): Has the user configured a U2F Security Key?
                * HasU2fDeviceWithFacetIdMatched (boolean): Has U2fDevice with FacetId matched?
                * SlackMemberIdSet (boolean): Is Slack MemberId Set?
                * EnablePurchasedLicenseMenu (boolean): Does the user have the right to view licenses?
                * MobileDeviceAuthCapableCount (integer): Mobile Device Auth Capable Count
                * PreferredCulture (string): User's preferred culture if any in culture code format (e.g. fr)
                * DisplayPreferredCulture (string): User's preferred culture if any in display format (e.g. French - français)
                * MfaSetupWizardSettings (object): Contains settings that guide MFA setup
                  Nested properties:
                    * ShowU2fInMfaSetupWizard (boolean): Want to show U2f in Mfa Setup Wizard?
                    * ShowSecurityQuestionInMfaSetupWizard (boolean): Want to show security question in Mfa Setup Wizard?
                    * ShowOathPassCodeInMfaSetupWizard (boolean): Want to show OathPassCode in Mfa Setup Wizard?
                    * ShowSmsMessageInMfaSetupWizard (boolean): Want to show SmsMessage in Mfa Setup Wizard?
                    * RequiredFactorSetupCount (integer): Required Factor Setup Count
                    * ShowMfaSetupWizard (boolean): Want to show Mfa Setup Wizard?
                * OnDeviceAuthenticatorConfigured (boolean): Is OnDeviceAuthenticator configured?
            * LastPasswordChangeDate (string): The date-time when the user has last changed the password.
            * DisplayName (string): Display name of the user.
            * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
            * PasswordExpDate (string): The expiry date-time of the user's password.
            * MobileNumber (string): User mobile phone number
            * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
            * SelfUnlocked (string): Self Unlock
            * LastLastLoginDate (string): Date-time user prior last logged in to the CyberArk Identity portal
            * DirectoryServiceLocalizedName (string): Directory service name localized to user's preferred language
            * DirectoryServiceName (string): Directory service name
            * Message (string): Error message for failure response. By default it is 'null'
            * DirectoryServiceType (string): The directory service type to which the user belongs. Ex- CDS (Cloud directory service).
            * IsSysAdmin (boolean): Specifies if the user is a system administrator.
            * SecurityQuestion (string): Specifies if any security question has been added to the user. The value will be 'yes' if the question is added. Else it will be 'null'.
            * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
            * CanChangePassword (boolean): A Boolean flag that specifies whether the user can change the password.
            * Name (string): User name
            * Id (string): The unique ID of the user. The unique ID is generated when the user is created.
            * SecurityQuestionsLastUpdate (string): Date-time user has last updated the security question
            * PasswordResetFlag (integer): An integer that specifies if the password reset is required for the user. The integer can be interpreted as below: 0: no reset needed 1: Reset required 2: Reset optional 3: Reset warning
            * PhonePinLastChangeDate (string): Date-time user last set their phone PIN
            * SqEnabled (boolean): Specifies if the security question MFA setup has been enabled for the user.
            * TenantId (string): The ID of the tenant to which the user belongs.
            * LastLoginDate (string): Date-time user last logged in
            * InnerExceptions (string): InnerExceptions
            * PasswordChangeSoftDays (integer): Days before a user should be warned to change a near to expiring password
            * MessageID (string): Message Id for failure response. By default it is 'null'
            * PasswordChangeHardHours (integer): Hours before a user should be prompted to change an near to expiring password
        * success (boolean): The success will be true or false
    * Error (object): Error message text on failure. Below message would be returned if provided user is invalid.
      Nested properties:
        * InvalidUserId (string): User with given Id not found.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "Result": {
      "DirectoryServiceId": "string_value",
      "ThirdPartyOathConfigured": false,
      "ErrorID": "string_value",
      "EmailAddress": "string_value",
      "HasPicture": false,
      "Settings": {
        "uisection": {
          "doNotShowIdaptiveWelcomeWizard": false,
          "floating-nav-part-Settings-expanded": false,
          "nav-part-Settings-expanded": false
        },
        "SlackAuthEnabled": false,
        "SecurityKeyConfigured": false,
        "HasU2fDeviceWithFacetIdMatched": false,
        "SlackMemberIdSet": false,
        "EnablePurchasedLicenseMenu": false,
        "MobileDeviceAuthCapableCount": 0,
        "PreferredCulture": "string_value",
        "DisplayPreferredCulture": "string_value",
        "MfaSetupWizardSettings": {
          "ShowU2fInMfaSetupWizard": false,
          "ShowSecurityQuestionInMfaSetupWizard": false,
          "ShowOathPassCodeInMfaSetupWizard": false,
          "ShowSmsMessageInMfaSetupWizard": false,
          "RequiredFactorSetupCount": 0,
          "ShowMfaSetupWizard": false
        },
        "OnDeviceAuthenticatorConfigured": false
      },
      "LastPasswordChangeDate": "string_value",
      "DisplayName": "string_value",
      "ErrorCode": "string_value",
      "PasswordExpDate": "string_value",
      "MobileNumber": "string_value",
      "Exception": "string_value",
      "SelfUnlocked": "string_value",
      "LastLastLoginDate": "string_value",
      "DirectoryServiceLocalizedName": "string_value",
      "DirectoryServiceName": "string_value",
      "Message": "string_value",
      "DirectoryServiceType": "string_value",
      "IsSysAdmin": false,
      "SecurityQuestion": "string_value",
      "IsSoftError": false,
      "CanChangePassword": false,
      "Name": "string_value",
      "Id": "string_value",
      "SecurityQuestionsLastUpdate": "string_value",
      "PasswordResetFlag": 0,
      "PhonePinLastChangeDate": "string_value",
      "SqEnabled": false,
      "TenantId": "string_value",
      "LastLoginDate": "string_value",
      "InnerExceptions": "string_value",
      "PasswordChangeSoftDays": 0,
      "MessageID": "string_value",
      "PasswordChangeHardHours": 0
    },
    "success": false
  },
  "Error": {
    "InvalidUserId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user details by name
PATH: /CDirectoryService/GetUserByName
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Specified user must be you, you must be a system administrator, or have user management permissions.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * username (string): User name of the cloud user to fetch (default=current user).
  Sample Request JSON:
  ```json
  {
  "username": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetUserByName
  Response Body Properties:
    * Result (object): Cloud user details.
      Nested properties:
        * InEverybodyRole (boolean): Is user in the Everybody role.
        * Description (string): User description.
        * Name (string): User name.
        * MobileNumber (string): User mobile phone number.
        * LastPasswordChangeDate (string): Date/time user last changed their password.
        * OfficeNumber (string): User office phone number.
        * PictureUri (string): File system path to user picture file.
        * ReportsTo (string): User reports to user UUID.
        * HomeNumber (string): User home phone number.
        * DisplayName (string): User display name.
        * PreferredCulture (string): User preferred culture.
        * Alias (string): Login suffix of the user.
        * State (string): User state (locked, enabled, expired).
        * PasswordNeverExpire (boolean): Does the user's password never expire.
        * Uuid (string): User UUID.
        * Mail (string): User email.
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {
    "InEverybodyRole": false,
    "Description": "string_value",
    "Name": "string_value",
    "MobileNumber": "string_value",
    "LastPasswordChangeDate": "string_value",
    "OfficeNumber": "string_value",
    "PictureUri": "string_value",
    "ReportsTo": "string_value",
    "HomeNumber": "string_value",
    "DisplayName": "string_value",
    "PreferredCulture": "string_value",
    "Alias": "string_value",
    "State": "string_value",
    "PasswordNeverExpire": false,
    "Uuid": "string_value",
    "Mail": "string_value"
  },
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get users details
PATH: /CDirectoryService/GetUsers
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Use this API to fetch the list with details of all existing users in the cloud directory. Only system administrators and users with user management rights can invoke this API. This API is a simple GET request which doesn't need any parameters in the body arguments. Only system admin or any user with user management permission can execute this to get a successful response with a list of all cloud users. The API call returns the ID, name and various details for all users present in the cloud directory. Before adding a new user, you can determine whether the user already exists by calling this API.
METADATA:
  * x-idap-anon: False
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetUsers
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): Result includes total count and details of all cloud users
          Nested properties:
            * ReturnID (string): ReturnID for the successful api call. By default it is null
            * Count (integer): It is the total number of users in the cloud directory
            * Columns (array): Array list of definition of all columns for the users
              Array items:
                * TableKey (string): Specifies whether the column is a key and if so what kind of key it is. It can be a primary key or a foreign key. Ex: 'Primary'
                * Description (string): It is the brief description of the column. Ex: 'Row Identifier (primary key)'
                * Name (string): It is the name of the column
                * Format (string): Currently It is not applicable. By default it is null
                * TableName (string): It is the name of the table. By default it is null
                * DDName (string): It is the Data dictionary name of the column. Ex: 'ID'
                * DDTitle (string): It is the Data dictionary title of the column. Ex: 'ID'
                * Type (string): It is the numeric indicator of the type of data in the column. Ex: '12'
                * IsHidden (boolean): Specifies whether column is hidden or not. default: false
                * Width (integer): Currently It is not applicable. By default it is 0
                * Title (string): Title of the column. Ex: 'ID'
                * ForeignKey (string): Specifies whether column holds a foreign key or not. By default, it is null
            * Results (array): List of all cloud users
              Array items:
                * Entities (array): Array list of definition of all Columns
                  Array items:
                    * IsForeignKey (string): Specifies whether the entity has a foreign key or not. By default, it is false
                    * Type (string): It is type of the entity. Ex: CDUser
                    * Key (string): Unique Id of the Entity. Ex:'cb9b5761-6cfe-45a5-8ecf-ce9fa9e0ff82'
                * Row (object): Cloud user details
                  Nested properties:
                    * HomeNumber (string): User's home number. Default: null
                    * ReportsTo (string): Unique id of the cloud user this user reports to. Default: null
                    * PictureUri (string): File system path to user picture file. Default: null
                    * DisplayName (string): Display name of user. Default: null
                    * Uuid (string): Unique Id of the user. Ex: 'cb9b5761-6cfe-45a5-8ecf-ce9fa9e0ff82'
                    * OfficeNumber (string): User's office number. Default: null
                    * MobileNumber (integer): User's mobile number. Default: null
                    * PreferredCulture (string): User preferred culture. Default: null
                    * StartDate (string): Start date for the user. Default: null
                    * Mail (string): Email address of the user. Ex: 'mark@email.com'
                    * EndDate (string): End date for the user. Default: null
                    * Description (string): Some information describing the user. Default: null
                    * Name (string): Username of the user. The username will be 'username@suffix' if suffix is required, else 'username'. Ex: 'mark@acme.inc'
            * FullCount (integer): It specifies number of cloud users present currently
            * IsAggregate (boolean): It is an attribute
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): The success will be true or false
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message, would be returned if a user without administrative/user management permission is trying to fetch the list of all cloud users
      Nested properties:
        * UnauthorizedUser (string): You are not authorized to perform this operation. Please contact your IT helpdesk
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "ReturnID": "string_value",
      "Count": 0,
      "Columns": [
        {
          "TableKey": "string_value",
          "Description": "string_value",
          "Name": "string_value",
          "Format": "string_value",
          "TableName": "string_value",
          "DDName": "string_value",
          "DDTitle": "string_value",
          "Type": "string_value",
          "IsHidden": false,
          "Width": 0,
          "Title": "string_value",
          "ForeignKey": "string_value"
        }
      ],
      "Results": [
        {
          "Entities": [
            {
              "IsForeignKey": "string_value",
              "Type": "string_value",
              "Key": "string_value"
            }
          ],
          "Row": {
            "HomeNumber": "string_value",
            "ReportsTo": "string_value",
            "PictureUri": "string_value",
            "DisplayName": "string_value",
            "Uuid": "string_value",
            "OfficeNumber": "string_value",
            "MobileNumber": 0,
            "PreferredCulture": "string_value",
            "StartDate": "string_value",
            "Mail": "string_value",
            "EndDate": "string_value",
            "Description": "string_value",
            "Name": "string_value"
          }
        }
      ],
      "FullCount": 0,
      "IsAggregate": false
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "UnauthorizedUser": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Update Base Profile
PATH: /CDirectoryService/ChangeUser
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Invoke this API to update the information for the specified user. User must be a cloud user. Only system administrator, users with user management rights, or the user itself can invoke this API. Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided. Refer guides section Update User Information
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * CmaRedirectedUserUuid (string): Idaptive mobile authenticator redirected user unique id.
    * HomeNumber (string): User home number.
    * useAlternateMfaAccount (boolean): Does the user have an alternate MFA Account?
    * OrgPath (string): The organisation name to which the user is added
    * AccountExp (string): Account expiry date/time.
    * ReportsTo (string): Unique Id of the user to whom the user reports.
    * DisplayName (string): User display name.
    * PasswordNeverExpire (boolean): Does user's password expire?
    * ID (string): Unique Id of the cloud user to change. Ex: a3e5bab3-9104-49cb-9d3a-e5da7gcef3a3
    * OfficeNumber (string): User office number.
    * ForcePasswordChangeNext (boolean): Should the user change password on first login?
    * MobileNumber (string): User mobile number.
    * InEverybodyRole (boolean): Is user in the Everybody role?
    * ServiceUser (boolean): Is User a service user?
    * VerifyEmail (boolean): Enforce user to verify the registered email address
    * PreferredCulture (string): User preferred culture.
    * Mail (string): User email address.
    * Description (string): User description.
    * Name (string): Username of the user. The username can be 'username@suffix' if suffix is required, else 'username'.
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "CmaRedirectedUserUuid": "string_value",
  "HomeNumber": "string_value",
  "useAlternateMfaAccount": false,
  "OrgPath": "string_value",
  "AccountExp": "string_value",
  "ReportsTo": "string_value",
  "DisplayName": "string_value",
  "PasswordNeverExpire": false,
  "ID": "string_value",
  "OfficeNumber": "string_value",
  "ForcePasswordChangeNext": false,
  "MobileNumber": "string_value",
  "InEverybodyRole": false,
  "ServiceUser": false,
  "VerifyEmail": false,
  "PreferredCulture": "string_value",
  "Mail": "string_value",
  "Description": "string_value",
  "Name": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceChangeUser
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): The result for the API call.
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call.
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure.
      Nested properties:
        * InvalidId (string): This error occurs when the unique user Id is not correct. By default, the below error message will be displayed: You are not authorized to perform this operation. Please contact your IT helpdesk.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {},
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Update user profile
PATH: /User/UpdateProfile
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: Use this API to update an existing cloud user properties. Only system administrators, users with user management rights, or the user itself can invoke this API. The profile information includes username, email address, display name, mobile number, etc. The user for which update is made must be a cloud user. This API updates also additional attributes which are present in the system. All the parameters other than those mentioned in the body args are treated as additional attributes.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * HomeNumber (string): Home number of the user
    * DisplayName (string): Name of the the user, suitable for display to end users
    * ID (string): The Unique Id of the Cloud user to update. The unique ID is generated when the user is created.
    * OfficeNumber (string): Office number of the user
    * MobileNumber (string): Mobile phone number of the user
    * VerifyEmail (boolean): Enforce user to verify the registered email address
    * Mail (string): Email address of the user. Note this field is required if either mobile number is not provided or 'SendEmailInvite' is true, or Identity Verification has to be done, or VerifyEmail is true
    * Description (string): Can provide some information related to the user.
    * Name (string): This is the name of the user which must be of the form 'name@suffix', not contain restricted characters, and must match an existing User Service suffix. Format:username@suffix. You must be a system administrator or have user management permissions to change this field.
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "HomeNumber": "string_value",
  "DisplayName": "string_value",
  "ID": "string_value",
  "OfficeNumber": "string_value",
  "MobileNumber": "string_value",
  "VerifyEmail": false,
  "Mail": "string_value",
  "Description": "string_value",
  "Name": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserUpdateProfile
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message, would be returned if provided user id or name is invalid/empty
      Nested properties:
        * EmptyUserId (string): When provided UserId is empty or null, you would see this message 'Parameter 'ID' must be specified.'
        * InvalidName (string): When Invalid name is provided, you would see this message 'User name is invalid; user names must be of the form 'name@suffix', not contain restricted characters, and suffix must match an existing User Service suffix.'
        * InvalidUserId (string): When Invalid UserId is provided, you would see this message 'You are not authorized to perform this operation'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "EmptyUserId": "string_value",
    "InvalidName": "string_value",
    "InvalidUserId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user attributes
PATH: /CDirectoryService/GetUserAttributes
METHOD: POST
TAGS: Manage User Attributes
METADATA:
  * x-idap-anon: False
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetUserAttributes
  Response Body Properties:
    * Result (object): Cloud user details
      Nested properties:
        * InEverybodyRole (boolean): Is user in the Everybody role?
        * Description (string): User description
        * Name (string): User name
        * MobileNumber (string): User mobile phone number
        * LastPasswordChangeDate (string): Date/time user last changed their password
        * OfficeNumber (string): User office phone number
        * PictureUri (string): File system path to user picture file
        * ReportsTo (string): User reports to user UUID.
        * HomeNumber (string): User home phone number
        * DisplayName (string): User display name
        * Alias (string): Login suffix of the user
        * State (string): User state (locked, enabled, expired)
        * PasswordNeverExpire (boolean): Does the user's password never expire?
        * Uuid (string): User UUID
        * Mail (string): User email
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {
    "InEverybodyRole": false,
    "Description": "string_value",
    "Name": "string_value",
    "MobileNumber": "string_value",
    "LastPasswordChangeDate": "string_value",
    "OfficeNumber": "string_value",
    "PictureUri": "string_value",
    "ReportsTo": "string_value",
    "HomeNumber": "string_value",
    "DisplayName": "string_value",
    "Alias": "string_value",
    "State": "string_value",
    "PasswordNeverExpire": false,
    "Uuid": "string_value",
    "Mail": "string_value"
  },
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Update AD user attributes
PATH: /UserMgmt/ChangeUserAttributes
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: This API is used to update the value of different attributes for an CyberArk Identity active directory users. - System administrators and users with user management rights, or the user itself can invoke this API. - To update multiple attributes add them in the request body and make the update call with this API. - Use this endpoint to set the active directory user attributes from cloud. - The JSON in the request body must include the unique id of the target active directory user.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * CmaRedirectedUserUuid (string): Unique id of the user account that you want to redirect multi-factor authentication to. Send null to remove existing the value.
    * ID (string): Unique id of the target user.
    * MobileNumber (string): User's mobile number (default=null). This field is required if SendSmsInvite is true.
    * OrgPath (string): The organization name (default=null) that you want to add the user to.
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "CmaRedirectedUserUuid": "string_value",
  "ID": "string_value",
  "MobileNumber": "string_value",
  "OrgPath": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtChangeUserAttributes
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided user id is invalid/empty
      Nested properties:
        * EmptyID (string): When provided user ID is empty or null, you would see this message 'User with Id not found.'
        * InvalidID (string): When Invalid user ID is provided, you would see this message 'User with given Id not found.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "EmptyID": "string_value",
    "InvalidID": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user settings
PATH: /Core/GetUserSettings
METHOD: POST
TAGS: Manage User Data
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * ID (query, Required): The user name.
  * SettingType (query, Required): The setting type to get.
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CoreGetUserSettings
  Response Body Properties:
    * Result (array): The user settings in UI Query Response format.
      Array items:
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": [
    {}
  ],
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get user roles and administrative rights
PATH: /UserMgmt/GetUsersRolesAndAdministrativeRights
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: This API is used to show a list of user roles and administrative rights associated with the roles. Only system administrators, users with user management rights can invoke this API. In response, it will return userid along with associated administrative rights.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
PARAMETERS:
  * ID (query, Required): The unique ID of the user to fetch administrative rights
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Args (object): The script arguments
      Nested properties:
        * Limit (integer): The maximum number of results to return for the specified page.
        * PageNumber (integer): The number of pages of results to return.
        * PageSize (integer): The number of entities to return per page.
        * Caching (integer): Can be set to the following values: -1: returns live data but writes to the cache for query results. 0: use the cache for both read/write with 'caching in minutes as TTL of the results.
        * SortBy (string): Comma-separated list of column names to sort by.
    Required fields: Args
  Sample Request JSON:
  ```json
  {
  "Args": {
    "Limit": 0,
    "PageNumber": 0,
    "PageSize": 0,
    "Caching": 0,
    "SortBy": "string_value"
  }
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtGetUsersRolesAndAdministrativeRights
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): Result includes Count and Columns definition.
          Nested properties:
            * ReturnID (string): ReturnID for the successful api call. By default it is null
            * Count (integer): It is the number of records that the call returns.
            * Columns (array): Array list of definition of all Columns.
              Array items:
                * TableKey (string): specifies whether column is a key and if so what kind of key it is. It can be primary key or foreign key.Ex: 'Primary'
                * Description (string): It is the brief description of the column. Ex: 'Row Identifier (primary key)'
                * Name (string): It is the name of the column.
                * Format (string): Currently It is not applicable. By default it is null.
                * TableName (string): It is the name of the table. By default it is null.
                * DDName (string): It is the Data dictionary name of the column. Ex: 'ID'
                * DDTitle (string): It is the Data dictionary title of the column. Ex: 'ID'
                * Type (string): It is the numeric indicator of the type of data in the column. Ex: '12'
                * IsHidden (boolean): specifies whether column is hidden or not. default: false
                * Width (integer): Currently It is not applicable. By default it is 0.
                * Title (string): Title of the column. Ex: 'ID'
                * ForeignKey (string): specifies whether column holds a foreign key or not. By default it is null.
            * Results (object): Results the rows from the table.
              Nested properties:
                * Entities (array): Array list of definition of all Columns.
                  Array items:
                    * IsForeignKey (string): Specifies whether the entity has foreign key or not. By default it is false.
                    * Type (string): It is type of the entity. Ex: Application
                    * Key (string): Unique Id of the Entity. Ex:'cb9b5761-6cfe-45a5-8ecf-ce9fa9e0ff82'
                * Row (object): Row consists of Entities list and Specifies the details
                  Nested properties:
                    * OrgPath (string): The Role OrgPath.
                    * RoleName (string): The Role Name
                    * Role (string): The role UUID
                    * ID (string): The role UUID
                    * AdministrativeRights (object): List of objects that have
                      Nested properties:
                        * Scope (string): The role Scope
                        * Path (string): file that describes the administrative right
                        * Description (string): localized name of the administrative right
                    * description (string): The role description
                    * Name (string): The role name
            * FullCount (integer): It specifies number of Rows count.
            * IsAggregate (boolean): It is an attribute.
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): The success will be true or false
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure.
      Nested properties:
        * InvalidID (string): 'This error occurs when the user id is not correct. By default, the below error message will be displayed: User id not found; they may have been deleted or the directory may be unavailable'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "ReturnID": "string_value",
      "Count": 0,
      "Columns": [
        {
          "TableKey": "string_value",
          "Description": "string_value",
          "Name": "string_value",
          "Format": "string_value",
          "TableName": "string_value",
          "DDName": "string_value",
          "DDTitle": "string_value",
          "Type": "string_value",
          "IsHidden": false,
          "Width": 0,
          "Title": "string_value",
          "ForeignKey": "string_value"
        }
      ],
      "Results": {
        "Entities": [
          {
            "IsForeignKey": "string_value",
            "Type": "string_value",
            "Key": "string_value"
          }
        ],
        "Row": {
          "OrgPath": "string_value",
          "RoleName": "string_value",
          "Role": "string_value",
          "ID": "string_value",
          "AdministrativeRights": {
            "Scope": "string_value",
            "Path": "string_value",
            "Description": "string_value"
          },
          "description": "string_value",
          "Name": "string_value"
        }
      },
      "FullCount": 0,
      "IsAggregate": false
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidID": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Set users picture
PATH: /CDirectoryService/SetUserPicture
METHOD: POST
TAGS: Manage User Attributes
DESCRIPTION: Use this API to set a user picture/photo for a particular user. Only system administrators, users with user management rights, or the user itself can invoke this API. In Response, the attached picture/photo will be set for a particular user
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
PARAMETERS:
  * ID (query, Required): The User UUID.
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * File (object): File containing the users picture, in the form-data. (Not as a parameter.)
    Required fields: File
  Sample Request JSON:
  ```json
  {
  "File": {}
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceSetUserPicture
  Response Body Properties:
    * Result (object): "\n \t {\n \t\t\"description\":\"Return\ \ object for a successful API call.\",\n \t\t\"type\":\"object\"\ ,\n \t\t\"properties\":{\n \t\t \"success\":{\n\ \ \t\t\t \"description\":\"It will be true for a successful\ \ API call.\",\n \t\t\t \"type\":\"boolean\"\n \ \ \t\t },\n \t\t \"Result\":{\n \t\t\t \"description\"\ :\"URI path to the user's picture.\",\n \t\t\t \"type\":\"\ string\"\n \t\t },\n \t\t \"Message\":{\n \ \ \t\t\t \"description\":\"Error message for failure response.\ \ By default it is 'null'\",\n \t\t\t \"type\":\"string\"\n\ \ \t\t },\n \t\t \"MessageID\":{\n \ \ \t\t\t \"description\":\"Message Id for failure response. By default\ \ it is 'null'\",\n \t\t\t \"type\":\"string\"\n \ \ \t\t },\n \t\t \"Exception\":{\n \t\t\t\ \ \"description\":\"Exception message if any exception is received from\ \ the API. By default it is 'null'\",\n \t\t\t \"type\":\"\ string\"\n \t\t },\n \t\t \"ErrorID\":{\n \ \ \t\t\t \"description\":\"Error ID if any error is received\ \ from the API. By default it is 'null'\",\n \t\t\t \"type\"\ :\"string\"\n \t\t },\n \t\t \"ErrorCode\":{\n\ \ \t\t\t \"description\":\"Error code if any error is received\ \ from the API. By default it is 'null'\",\n \t\t\t \"type\"\ :\"string\"\n \t\t },\n \t\t \"IsSoftError\"\ :{\n \t\t\t \"description\":\"SoftError if true indicates\ \ this is not actually an exception but an UI warning popup.\",\n \ \ \t\t\t \"type\":\"boolean\"\n \t\t },\n \ \ \t\t \"InnerExceptions\":{\n \t\t\t \"description\"\ :\"Inner Exceptions if any received from the API. By default it is 'null'\"\ ,\n \t\t\t \"type\":\"string\"\n \t\t }\n \ \ \t\t}\n \t }\n "
    * Error (object): Error message text on failure.
      Nested properties:
        * UnauthorizedUser (string): This error occurs when the 'UUID' parameter is wrong. By default, the below error message will be displayed: You are not authorized to perform this operation. Please contact your IT helpdesk.
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {
    "UnauthorizedUser": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Fetch attributes for a specified user.
PATH: /UserMgmt/GetUserAttributes
METHOD: POST
TAGS: Manage User Attributes
DESCRIPTION: Attributes will vary depending on the type of the directory service the user belongs to.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * ID (query, Optional): User UUID to fetch attributes for (default=current user)
  * directoryServiceUuid (query, Optional): Directory service UUID of the user (default=null)
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtGetUserAttributes
  Response Body Properties:
    * Result (object): User Attributes results
      Nested properties:
        * propertyn (object): nth property of the user (name varies)
        * property2 (object): Second property of the user (name varies)
        * directoryServiceUuid (string): UUID of the directory service the user is from
        * ... (object): More properties (name varies)
        * property1 (object): First property of the user (name varies)
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {
    "propertyn": {},
    "property2": {},
    "directoryServiceUuid": "string_value",
    "...": {},
    "property1": {}
  },
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get Schema
PATH: /ExtData/GetSchema
METHOD: POST
TAGS: Manage User Attributes
DESCRIPTION: Use this API to obtain a list of the current attributes(columns) for a table in the Tenant's extended schema. Only system administrators, users with user management rights, or the user itself can invoke this API. When a user invokes this API for a given table, the list of all extensible attributes present in the table, along with their details, is returned. This API is necessary because all existing attributes must be included when adding/updating the Tenant schema. For more details, please refer to Use extensible attributes.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Table (string): Name of the table to examine
    Required fields: Table
  Sample Request JSON:
  ```json
  {
  "Table": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: ExtDataGetSchema
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): The result for the API call
          Nested properties:
            * ColumnLimit (string): Maximum number of rows present in the column
            * Columns (array): An array list of columns as DataEntity objects
              Array items:
                * Title (string): The column title
                * UserEditable (boolean): If the column properties can be edited or not
                * Type (string): The column data type
                * Description (string): The description of data stored in the column
                * Name (string): The column name
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided table is invalid/empty
      Nested properties:
        * InvalidTableName (string): If Invalid Table is provided, User will see the following message 'The requested data or its dependent data was not found in the service.'
        * EmptyTableName (string): When provided Table is empty or null, you would see this message 'Parameter 'Table' must be specified.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "ColumnLimit": "string_value",
      "Columns": [
        {
          "Title": "string_value",
          "UserEditable": false,
          "Type": "string_value",
          "Description": "string_value",
          "Name": "string_value"
        }
      ]
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidTableName": "string_value",
    "EmptyTableName": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get additional attributes
PATH: /ExtData/GetColumns
METHOD: POST
TAGS: Manage User Attributes
DESCRIPTION: This API is used to get the list of all the current attributes and their values for a CyberArk Identity user. Only system administrators, users with user management rights, or the user itself can invoke this API. When this API is invoked for a user, the list of all extensible attributes set for that particular user with their respective values is returned. Extended unset attributes (i.e., null values) for the user in this request are not returned in the response unless specified in the API request using parameter 'IncludeNulls'. For more details, please refer to Use extensible attributes.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ID (string): ID of the user to fetch list of attributes
    * IncludeNulls (boolean): Include columns with null values or not
    * Table (string): Name of the table to fetch the attributes from
    Required fields: ID, Table
  Sample Request JSON:
  ```json
  {
  "ID": "string_value",
  "IncludeNulls": false,
  "Table": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: ExtDataGetColumns
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (object): The values of the extended columns as an object
          Nested properties:
            * ColumnName (string): The value of the column
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided table is invalid/empty, or user id is empty
      Nested properties:
        * InvalidTableName (string): If Invalid Table is provided, User will see the following message 'The requested data or its dependent data was not found in the service.'
        * EmptyID (string): When Invalid/Empty ID is provided, you would see this message 'Parameter 'ID' must be specified.'
        * EmptyTableName (string): When provided Table is empty or null, you would see this message 'Parameter 'Table' must be specified.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": {
      "ColumnName": "string_value"
    },
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidTableName": "string_value",
    "EmptyID": "string_value",
    "EmptyTableName": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Set additional attributes
PATH: /ExtData/SetColumns
METHOD: POST
TAGS: Manage User Attributes
DESCRIPTION: This API is used to update the extended attribute values for a CyberArk Identity user. Only system administrators, users with user management rights, or the user itself can invoke this API. When this API is invoked for the user along with the attribute name and new value, this value replaces the old one in the tenant. The attribute value can be a string, date, boolean, double, or integer and must match the column definition. To clear an attribute's value, we can set it to null. For more details, please refer to Use extensible attributes.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Columns (object): A list of extended columns to update
      Nested properties:
        * PhoneNumber (string): A column's new value which needs to be set
    * ID (string): User ID of the user to set the attributes for
    * Table (string): Name of the table to modify attributes
    Required fields: Columns, ID, Table
  Sample Request JSON:
  ```json
  {
  "Columns": {
    "PhoneNumber": "string_value"
  },
  "ID": "string_value",
  "Table": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: ExtDataSetColumns
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided table is invalid/empty, or column data type is invalid/empty
      Nested properties:
        * InvalidTableName (string): If Invalid Table is provided, User will see the following message 'The requested data or its dependent data was not found in the service.'
        * EmptyID (string): When Empty ID is provided, you would see this message 'Parameter 'ID' must be specified.'
        * InvalidID (string): When Invalid ID is provided, you would see this message 'The requested data or its dependent data was not found in the service.'
        * EmptyTableName (string): When provided Table is empty or null, you would see this message 'Parameter 'Table' must be specified.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidTableName": "string_value",
    "EmptyID": "string_value",
    "InvalidID": "string_value",
    "EmptyTableName": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Add additional attributes
PATH: /ExtData/UpdateSchema
METHOD: POST
TAGS: Manage User Data
DESCRIPTION: This API is used to add new attributes to the tenant schema or edit/update an existing attribute in the schema. Only system administrators can invoke this API. To add multiple attributes to an empty schema, add them to the list and make the update call with this API. To add a single attribute to a schema that already has attributes, use the GetSchema endpoint to get a list of attributes currently in the schema, add the new attribute to the list, and then call this API with the updated complete list. The JSON in the request body must include all current attributes in the schema plus the new attributes. For more details refer to User attributes using API.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Columns (object): A list of extended columns to update
      Nested properties:
        * StreetAddress (object): An extended column
          Nested properties:
            * Title (string): The column title
            * Type (string): The column data type
            * Description (string): Description of data stored in the column
    * AllowDelete (boolean): Delete columns which do not exist in updated columns
    * Table (string): Name of the table to modify
    Required fields: Columns, Table
  Sample Request JSON:
  ```json
  {
  "Columns": {
    "StreetAddress": {
      "Title": "string_value",
      "Type": "string_value",
      "Description": "string_value"
    }
  },
  "AllowDelete": false,
  "Table": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: ExtDataUpdateSchema
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided table is invalid/empty, or column data type is invalid/empty
      Nested properties:
        * InvalidTableName (string): If Invalid Table is provided, User will see the following message 'The requested data or its dependent data was not found in the service.'
        * InvalidColumnType (string): If Invalid or Empty column type is provided, The user will see the following message 'Invalid arguments passed to the server.'
        * EmptyTableName (string): When provided Table is empty or null, you would see this message 'Parameter 'Table' must be specified.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidTableName": "string_value",
    "InvalidColumnType": "string_value",
    "EmptyTableName": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Delete users
PATH: /UserMgmt/RemoveUsers
METHOD: POST
TAGS: Delete Users
DESCRIPTION: You must be a system administrator or have user management permissions. Will delete cloud users. Users for other directory services are only removed from the cloud. This API will fail if any of the ids specified are the current user.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Users (array): List of user UUIDs to send invitations to
      Array items:
    Required fields: Users
  Sample Request JSON:
  ```json
  {
  "Users": [
    "string_value"
  ]
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtRemoveUsers
  Response Body Properties:
    * Result (object): Standard result
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Change user state
PATH: /CDirectoryService/ChangeUserState
METHOD: POST
TAGS: Manage User State
DESCRIPTION: Invoke this API when you want to change the user state from disabled to active or vice versa Only system administrator, users with user management rights, or the user itself can invoke this API. The API will fail, if the user itself will try to change its user state.
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * uuid (string): The unique ID of the user. The unique ID is generated when the user is created
    * state (boolean): Boolean value to change the user state. True = Active and False = Suspended
    Required fields: uuid, state
  Sample Request JSON:
  ```json
  {
  "uuid": "string_value",
  "state": false
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceChangeUserState
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result will be null.
        * InnerExceptions (string): InnerExceptions
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call.
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure.
      Nested properties:
        * MissingArgument (string): Invalid arguments passed to the server.
        * InvalidUserId (string): User with given unique ID doesn’t exist.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "MissingArgument": "string_value",
    "InvalidUserId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Set user state
PATH: /CDirectoryService/SetUserState
METHOD: POST
TAGS: Manage User State
DESCRIPTION: CyberArk Identity provides this API to lock, disable, or set a Cloud Directory account to expired. Only system administrator and users with user management permissions, can invoke this API. Specified new state may either be 'None' or include one or more of the following values (comma separated): Locked, Disabled, or Expired. For example to lock an account, after too many failed logins, make a call with state as "Expired". You can reenable a locked account by setting the state to "None".
METADATA:
  * x-idap-anon: False
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ID (string): Unique id of the cloud user to change the state for
    * state (string): New state of the user to set. The states available are None, Locked, Disabled or Expired
    Required fields: ID, state
  Sample Request JSON:
  ```json
  {
  "ID": "string_value",
  "state": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceSetUserState
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure and below message would be returned if provided user id or user's new state is invalid/empty
      Nested properties:
        * EmptyID (string): When provided user id is empty or null, you would see this message 'Object reference not set to an instance of an object.'
        * InvalidState (string): When invalid user state is provided, you would see this message 'Invalid arguments passed to the server.'
        * InvalidID (string): When invalid user id is provided, you would see this message 'Object reference not set to an instance of an object.'
        * EmptyState (string): When empty user state is provided, you would see this message 'Invalid arguments passed to the server.'
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "EmptyID": "string_value",
    "InvalidState": "string_value",
    "InvalidID": "string_value",
    "EmptyState": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Check if user is locked
PATH: /UserMgmt/IsUserCloudLocked
METHOD: POST
TAGS: Manage User State
DESCRIPTION: You must be a system administrator or have user management permissions or user may be checking for him/herself.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * user (query, Required): The name or uuid of the user to check.
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtIsUserCloudLocked
  Response Body Properties:
    * Result (object): Below is the response structure.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): Boolean (True/False) result for the request.
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call.
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Check if user is locked out by policy
PATH: /UserMgmt/IsUserLockedOutByPolicy
METHOD: POST
TAGS: Manage User State
DESCRIPTION: Use this API to check if a user can answer the MFA challenges and authenticates itself against CyberArk Identity. Only system administrators, users with user management rights, or the user itself can invoke this API. The user id of the user is passed as query parameter to the API request. Pass an empty string to test the currently logged-in user. Note that only administrative users can test other users. The server returns True if the user is locked out (i.e. cannot answer MFA challenges) and false otherwise.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * user (query, Required): The name or unique id of the user to test. Pass an empty string to test the currently logged-in user. Note that users with administrative rights can test other users
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtIsUserLockedOutByPolicy
  Response Body Properties:
    * Result (object): Return object for a successful API call
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default, it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default, it is 'null'
        * Exception (string): Exception message if an exception is received from the API. By default, it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result for the API call
        * InnerExceptions (string): Inner Exceptions if any received from the API. By default, it is 'null'
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): It will be true for a successful API call
        * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup
    * Error (object): Error message text on failure, below message, would be returned if provided user id is invalid/empty
      Nested properties:
        * InvalidUserId (string): Unknown user.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidUserId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Disable/enable a user
PATH: /UserMgmt/SetCloudLock
METHOD: POST
TAGS: Manage User State
DESCRIPTION: Invoke this API if you want to lock the user account of a given user Only system administrator, users with user management rights, or the user itself can invoke this API.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * user (query, Required): The unique ID of the user. The unique ID is generated when the user is created.
  * lockUser (query, Required): This parameter specifies if the user account should be locked or not.The default value is 'false'.
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtSetCloudLock
  Response Body Properties:
    * Result (object): Return object for a successful API call.
      Nested properties:
        * ErrorID (string): Error ID if any error is received from the API. By default it is 'null'
        * ErrorCode (string): Error code if any error is received from the API. By default it is 'null'
        * Exception (string): Exception message if any exception is received from the API. By default it is 'null'
        * MessageID (string): Message Id for failure response. By default it is 'null'
        * Result (string): The result will be null.
        * InnerExceptions (string): InnerExceptions
        * Message (string): Error message for failure response. By default it is 'null'
        * success (boolean): The success will be true or false.
        * IsSoftError (boolean): SoftError if true indicates this is not actually an exception but an UI warning popup.
    * Error (object): Error message text on failure.
      Nested properties:
        * InvalidUserId (string): User with given Id not found.
  Sample Response JSON:
  ```json
  {
  "Result": {
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "Exception": "string_value",
    "MessageID": "string_value",
    "Result": "string_value",
    "InnerExceptions": "string_value",
    "Message": "string_value",
    "success": false,
    "IsSoftError": false
  },
  "Error": {
    "InvalidUserId": "string_value"
  }
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Exempt a user from MFA
PATH: /CDirectoryService/ExemptUserFromMfa
METHOD: POST
TAGS: Additional User Management APIs
DESCRIPTION: You must be a system administrator or have user management permissions. User is exempt from MFA login for a specified amount of time.
METADATA:
  * x-idap-anon: False
PARAMETERS:
  * ID (query, Required): User UUID to except from MFA
  * timespan (query, Optional): Amount of time to exempt the user from MFA (default=10 minutes)
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: UserMgmtRemoveUsers
  Response Body Properties:
    * Result (object): Standard result
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {},
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Fetch technical support user.
PATH: /CDirectoryService/GetTechSupportUser
METHOD: POST
TAGS: Additional User Management APIs
DESCRIPTION: You must be a system administrator or have user management permissions.
METADATA:
  * x-idap-anon: False
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceGetTechSupportUser
  Response Body Properties:
    * Result (object): Support user information
      Nested properties:
        * Uuid (string): Support user UUID
        * PasswordExp (string): Support user expire date
        * Name (string): Support user name
    * Error (object): Error message text on failure, may be null
  Sample Response JSON:
  ```json
  {
  "Result": {
    "Uuid": "string_value",
    "PasswordExp": "string_value",
    "Name": "string_value"
  },
  "Error": {}
}
  ```
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Get Risk Level for a specified user
PATH: /UserMgmt/GetUserRiskLevel
METHOD: POST
TAGS: Get User Risk Level
DESCRIPTION: This API enables you to fetch the details of an existing user in the Cloud Directory. It retrieves the latest risky event of a user and the point-in-time risk generated by the system. Only system administrators with user management rights can invoke this API. To fetch the Cloud Directory, enter the user’s unique ID as an input parameter in the request body.
METADATA:
  * x-idap-anon: False
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * ID (string): This is the user unique ID of the user that is generated when the user is created. This ID is used to fetch the user’s attributes from the Cloud Directory.
    Required fields: ID
  Sample Request JSON:
  ```json
  {
  "ID": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: application/json
  Response Schema: UserMgmtGetUserRiskLevel
  Description: Return object for API call.
  Response Body Properties:
    * success (boolean): The success status will be either true or false.
    * Result (object): The response object for the API call. The default value is 'null'.
      Nested properties:
        * Uuid (string): The unique ID of the user. For example, cb9b5761-6cfe-45a5-8ecf-ce9fa9e0gf86.
        * RiskLevel (string): This indicates the risk level of the user. For example, high, medium, or low.
    * Message (string): The error message for the failure response. By default, the failure response is 'null'.
    * MessageID (string): The message ID for the failure response. The default value is 'null'.
    * Exception (string): The exception message received from the API. The default value is 'null'.
    * ErrorId (string): The error ID received from the API. The default value is 'null'.
    * ErrorCode (string): The error code received from the API. The default value is 'null'.
    * IsSoftError (boolean): SoftError if true indicates this is not an exception but a UI warning popup.
    * InnerExceptions (string): Inner Exceptions if any received from the API. By default it is 'null'.
  Sample Response JSON:
  ```json
  {
  "success": false,
  "Result": {
    "Uuid": "string_value",
    "RiskLevel": "string_value"
  },
  "Message": "string_value",
  "MessageID": "string_value",
  "Exception": "string_value",
  "ErrorId": "string_value",
  "ErrorCode": "string_value",
  "IsSoftError": false,
  "InnerExceptions": "string_value"
}
  ```
  Status Code: 401
  Description: Unauthorized access to the API.
  Content Type: text/html
SECURITY: bearerAuth
--------------------------------------------------------------------------------
ENDPOINT: Start Authentication
PATH: /CDirectoryService/StartAuthentication
METHOD: POST
TAGS: Start authentication
DESCRIPTION: CyberArk Identity uses the API to initiate the user's authentication process. If the user exists then the response contains challenges. - If the user does not have any challenges then the following message is returned: User does not have the attributes required to login. - Contact CyberArk Support for more information. - The request body must include the UUID attribute. CyberArk supports SMS, Email, OATH, Phone call, and Mobile Authenticator.
METADATA:
  * x-idap-anon: True
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * UUID (string): This is the UUID of the user whose identity the admin is trying to verify.
    Required fields: UUID
  Sample Request JSON:
  ```json
  {
  "UUID": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API result
  Content Type: */*
  Response Schema: CDirectoryServiceStartAuthentication
  Response Body Properties:
--------------------------------------------------------------------------------
ENDPOINT: Send Identity Verification
PATH: /CDirectoryService/SendIdentityVerification
METHOD: POST
TAGS: Send Identity Verification
DESCRIPTION: Use this API to verify identity against CyberArk Identity. - Once start authentication API is invoked and a user authentication session has been created successfully, the SendIdentityVerification API is invoked to further advance the user authentication process. - SessionId and MechanismId returned as part of the “/startAuthentication” API are passed as request parameters to this API. - Actions can be passed as one of the following options: startoob pool answer
METADATA:
  * x-idap-anon: True
  * x-codegen-request-body-name: payload
REQUEST BODY: Required
  Content Type: application/json
  Schema Properties:
    * Action (string): Depending on the type of mechanism you are advancing, use one of the following actions: * `Answer` (advance an in-band or answerable OOB mechanism) * `StartOOB` (initiate an out-of-band mechanism) * `Poll` (wait for a user to pass or fail an OOB mechanism)
    * Answer (string): This is the user-provided value to advance in-band or answerable 008 mechanisms. For example, a password, or OTP.
    * MechanismId (string): This is the mechanism ID you are advancing. This is provided in the [/CDirectoryService/StartAuthentication] response.
    * SessionId (string): The ID of the authentication session in which the mechanism was created. This is provided in the [/CDirectoryService/StartAuthentication].
    * TenantId (string): The tenant ID where the user is authenticating. This value should be consistent with the tenant used in the [/CDirectoryService/StartAuthentication].
    Required fields: Action, MechanismId, SessionId, TenantId
  Sample Request JSON:
  ```json
  {
  "Action": "string_value",
  "Answer": "string_value",
  "MechanismId": "string_value",
  "SessionId": "string_value",
  "TenantId": "string_value"
}
  ```
RESPONSES:
  Status Code: 200
  Description: API-Result
  Content Type: */*
  Response Schema: CDirectoryServiceSendIdentityVerification
  Response Body Properties:
    * Result (object): The response structure below displays if the API request was successful.
      Nested properties:
        * success (boolean): This is true for a successful API call.
        * Result (object): The result received from the Identity Cloud was successful.
          Nested properties:
            * Summary (string): This is the status of a successful response.
        * Message (string): Message
        * MessageID (string): MessageID
        * Exception (string): Exception
        * ErrorID (string): ErrorID
        * ErrorCode (string): ErrorCode
        * IsSoftError (string): IsSoftError
        * InnerExceptions (string): InnerExceptions
    * Error (object): The error message below displays when the API request contains the wrong mechanism ID/session ID/Answer.
      Nested properties:
        * success (boolean): This is true for a successful API call.
        * Result (object): This is the result received from the Identity Cloud.
          Nested properties:
            * Summary (string): This is the status of a failed response such as StartNextChallenge, error.
        * Message (string): Message
        * MessageID (string): MessageID
        * Exception (string): Exception
        * ErrorID (string): ErrorID
        * ErrorCode (string): ErrorCode
        * IsSoftError (string): IsSoftError
        * InnerExceptions (string): InnerExceptions
  Sample Response JSON:
  ```json
  {
  "Result": {
    "success": false,
    "Result": {
      "Summary": "string_value"
    },
    "Message": "string_value",
    "MessageID": "string_value",
    "Exception": "string_value",
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "IsSoftError": "string_value",
    "InnerExceptions": "string_value"
  },
  "Error": {
    "success": false,
    "Result": {
      "Summary": "string_value"
    },
    "Message": "string_value",
    "MessageID": "string_value",
    "Exception": "string_value",
    "ErrorID": "string_value",
    "ErrorCode": "string_value",
    "IsSoftError": "string_value",
    "InnerExceptions": "string_value"
  }
}
  ```
--------------------------------------------------------------------------------